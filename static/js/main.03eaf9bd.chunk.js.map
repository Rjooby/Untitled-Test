{"version":3,"sources":["logo.svg","components/Activities/Activity.js","components/Activities/index.js","components/Account/Settings.js","components/Account/Profile.js","components/Account/index.js","components/Accordion/index.js","components/NavigationBar/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Activity","props","type","useState","currentActivity","setActivity","useEffect","fetchData","url","fetch","then","res","json","console","log","onRefresh","activity","participants","Fragment","className","onClick","renderActivity","Activities","exact","path","match","render","Settings","userInfo","setInfo","firstName","lastName","email","formValues","setFormValues","handleChange","e","newState","target","name","value","onSubmit","preventDefault","htmlFor","id","placeholder","aria-label","onChange","label","Profile","Account","isLoggedIn","onLogin","signInEmail","setEmail","Accordion","title","children","isOpen","NavigationBar","memo","accordionStatus","setAccordionStatus","activities","account","to","App","defaultUserState","history","createBrowserHistory","setUserInfo","setLoginStatus","isAccordionOpen","setAccordion","newUser","href","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03eaf9bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\n\nexport const Activity = (props) => {\n\n    const {\n        type\n    } = props;\n\n    const [currentActivity, setActivity] = useState(null);\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    const fetchData = () => {\n        let url = `https://www.boredapi.com/api/activity`;\n        if (type) {\n            url += `?type=${type}`;\n        }\n\n        fetch(url)\n            .then((res) => (res.json()))\n            .then((res) => {\n                console.log(res);\n                setActivity(res);\n            })\n    }\n\n    const onRefresh = () => {\n        fetchData();\n    }\n\n\n    const renderActivity = () => {\n        const { activity, type, participants } = currentActivity;\n        return(\n            <React.Fragment>\n                <ul className=\"activity\">\n                    <li>Activity: {activity}</li>\n                    <li>Type: {type}</li>\n                    <li>Participants: {participants}</li>\n                </ul>\n\n                <button onClick={onRefresh}>Refresh</button>\n            </React.Fragment>\n        )\n    }\n\n    const renderEmpty = () => {\n        return(\n            <div>\n                Loading\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {currentActivity ? renderActivity() : renderEmpty()}\n        </div>\n    )\n\n}\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport {Activity} from \"./Activity\";\n\nconst Activities = (props) => {\n    console.log('Activities', props);\n\n    return(\n        <div>\n            Activities\n            <Route\n                exact\n                path={`${props.match.url}/recreational`}\n                render={(props) => <Activity {...props} type=\"recreational\"/>}\n            />\n            <Route\n                exact\n                path={`${props.match.url}/cooking`}\n                render={(props) => <Activity {...props} type=\"cooking\"/>}\n            />\n        </div>\n    )\n}\n\nexport default Activities;\n","import React, { useState, useEffect } from 'react';\nimport \"./Account.css\";\n\n\nconst Settings = (props) => {\n\n    const { userInfo, setInfo } = props;\n\n    const {\n        firstName, lastName, email\n    } = userInfo;\n\n    const [formValues, setFormValues] = useState({\n        firstName: null,\n        lastName: null,\n        email: null,\n    })\n\n    // useEffect(() => {\n    //     if (userInfo) {\n    //\n    //     }\n    // }, [])\n    //\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(formValues);\n        setInfo(formValues);\n    }\n\n    const handleChange = (e) => {\n        const newState = {\n            ...formValues,\n            [e.target.name]: e.target.value,\n        }\n\n        setFormValues(newState);\n    }\n\n    return (\n        <div className=\"form-container\">\n            <form className=\"user-form\" onSubmit={handleSubmit}>\n                <label htmlFor=\"firstNameInput\">\n                    First Name\n                    <input\n                        id=\"firstNameInput\"\n                        type=\"text\"\n                        name=\"firstName\"\n                        placeholder={firstName}\n                        aria-label=\"First Name\"\n                        onChange={handleChange}\n                        // aria-required={true}\n                    />\n                </label>\n\n                <label htmlFor=\"lastNameInput\">\n                    Last Name:\n                    <input\n                        id=\"lastNameInput\"\n                        type=\"text\"\n                        name=\"lastName\"\n                        placeholder={lastName}\n                        aria-label=\"Last Name\"\n                        onChange={handleChange}\n                    />\n                </label>\n\n                <label htmlFor=\"emailInput\">\n                    Email:\n                    <input\n                        label=\"emailInput\"\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder={email}\n                        aria-label=\"Email\"\n                        onChange={handleChange}\n                    />\n                </label>\n\n                <label htmlFor=\"submit\">\n                    <input type=\"submit\" name=\"submit\" value=\"Save\"/>\n                </label>\n            </form>\n        </div>\n    )\n}\n\nexport default Settings;\n","import React from 'react';\n\nconst Profile = (props) => {\n    console.log(props);\n    const {\n        userInfo,\n    } = props;\n\n    const { firstName, lastName, email } = userInfo;\n    return (\n        <div>\n            <ul>\n                <li>First Name: {firstName} </li>\n                <li>Last Name: {lastName}</li>\n                <li>Email: {email} </li>\n            </ul>\n\n\n        </div>\n    )\n}\n\nexport default Profile;\n","import React, {useState} from 'react';\nimport { Route } from 'react-router-dom';\nimport Settings from './Settings'\nimport Profile from './Profile';\n\nconst Account = (props) => {\n    const {\n        userInfo,\n        setInfo,\n        isLoggedIn,\n        onLogin,\n    } = props;\n\n    const [signInEmail, setEmail] = useState(null);\n\n    const onSignIn = (e) => {\n        e.preventDefault();\n        onLogin(signInEmail);\n    }\n\n    const handleChange = (e) => {\n        setEmail(e.target.value);\n    }\n\n    //  Should ideally be extracted into its own authentication component and\n    //  rendered whenever needing auth with redirect parameters preserved in URL\n    if (!isLoggedIn) {\n        return (\n            <div>\n                You gotta sign in\n                <form className=\"signin-form\" onSubmit={onSignIn}>\n\n                    <label htmlFor=\"emailSignin\">\n                        Email:\n                        <input type=\"email\" name=\"emailSignin\" onChange={handleChange}/>\n                    </label>\n                    <label htmlFor=\"signIn\">\n                        <input type=\"submit\" name=\"signIn\" value=\"Submit\"/>\n                    </label>\n                </form>\n            </div>\n        )\n    }\n    //\n\n    return (\n        <div>\n            <Route\n                exact\n                path={`${props.match.url}/profile`}\n                render={(props) => <Profile {...props} userInfo={userInfo}/>}\n            />\n            <Route\n                exact\n                path={`${props.match.url}/settings`}\n                render={(props) => <Settings {...props}\n                                             userInfo={userInfo}\n                                             setInfo={setInfo}\n                />}\n            />\n        </div>\n    )\n}\n\nexport default Account\n","import React, { useState } from 'react';\nimport './Accordion.css';\n\nconst Accordion = (props) => {\n    const {title, children, isOpen, name, onClick} = props;\n\n    return (\n        <div className=\"accordion-container\" >\n            <div className=\"title\"\n                 onClick={() => onClick(name)}\n            >\n                {title}\n            </div>\n            <div className={isOpen ? \"open\" : \"closed\"}>\n                <div className=\"collapsable-content\">\n                    {children}\n                </div>\n            </div>\n\n        </div>\n    )\n\n\n\n}\n\nexport default Accordion;\n","import React, {memo} from 'react';\nimport { Link, NavLink } from 'react-router-dom'\nimport './NavigationBar.css';\nimport Accordion from '../Accordion';\n\nconst NavigationBar = memo((props) => {\n    const { accordionStatus, setAccordionStatus } = props;\n    const {activities, account} = accordionStatus;\n\n    const onClick = (name) => {\n        const newState = {\n            ...accordionStatus,\n            [name]: !accordionStatus[name],\n        }\n        setAccordionStatus(newState);\n    }\n\n    return (\n        <div className=\"navbar\">\n            <ul className=\"nav-section-list\">\n                <li className=\"section-item\">\n                    <Accordion\n                        name=\"activities\"\n                        isOpen={activities}\n                        onClick={onClick}\n                        title=\"Activities\">\n                        <NavLink to=\"/Untitled-Test/activities/recreational\">Recreational</NavLink>\n                        <NavLink to=\"/Untitled-Test/activities/cooking\">Cooking</NavLink>\n                    </Accordion>\n                </li>\n                <li className=\"section-item\">\n                    <Accordion\n                        name=\"account\"\n                        isOpen={account}\n                        onClick={onClick}\n                        title=\"Account\"\n                    >\n                        <NavLink to=\"/Untitled-Test/account/profile\">Profile</NavLink>\n                        <NavLink to=\"/Untitled-Test/account/settings\">Settings</NavLink>\n                    </Accordion>\n                </li>\n\n            </ul>\n        </div>\n    )\n})\n\nexport default NavigationBar;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\nimport Activities from '../Activities'\nimport Account from '../Account'\nimport NavigationBar from '../NavigationBar';\nimport { createBrowserHistory } from 'history';\n\nimport logo from '../../logo.svg';\nimport './App.css';\n\nfunction App(props) {\n    const defaultUserState = {firstName: null, lastName: null, email: null};\n\n    const history = createBrowserHistory();\n\n    const [userInfo, setUserInfo] = useState(defaultUserState);\n    const [isLoggedIn, setLoginStatus] = useState(false);\n    const [isAccordionOpen, setAccordion] = useState({activities: false, account: false })\n\n    const onLogin = (email) => {\n        const newUser = {\n            ...userInfo,\n            email: email,\n        };\n\n        setUserInfo(newUser);\n        setLoginStatus(true);\n    }\n\n    const onLogout = () => {\n        setUserInfo(defaultUserState);\n        setLoginStatus(false);\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"header\">\n                <div className=\"logo\">\n                    <a href=\"/Untitled-Test\">BORED LOGO</a>\n                    <div>Hello</div>\n                </div>\n                <div>\n                    <label htmlFor=\"logout\">\n                        <button name=\"logout\" onClick={() => onLogout()}>Log Out</button>\n                    </label>\n                </div>\n            </div>\n            <div className=\"body\">\n                <Router history={history}>\n                    <NavigationBar\n                        {...props}\n                        accordionStatus={isAccordionOpen}\n                        setAccordionStatus={setAccordion}\n                    />\n                    <div className=\"app-content\">\n                        <Switch>\n                            <Route path=\"/Untitled-Test/activities\" component={Activities} />\n                            <Route path=\"/Untitled-Test/account\"\n                                   render={(props) =>(\n                                       <Account {...props}\n                                                isLoggedIn={isLoggedIn}\n                                                onLogin={onLogin}\n                                                userInfo={userInfo}\n                                                setInfo={setUserInfo}\n                                       />\n                                   )}\n                            />\n                            <Route path=\"/\" render={() => <div>Whatever I want</div>}/>\n\n                        </Switch>\n                    </div>\n                </Router>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","components/Activities/Activity.js","components/Activities/index.js","components/Account/index.js","components/Accordion/index.js","components/NavigationBar/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Activity","props","type","console","log","useState","currentActivity","setActivity","useEffect","url","fetch","then","res","json","activity","participants","className","renderActivity","Activities","path","match","render","Profile","Account","firstName","lastName","email","Accordion","title","children","isOpen","name","onClick","NavigationBar","memo","accordionStatus","setAccordionStatus","activities","account","newState","to","App","isAccordionOpen","setAccordion","href","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb63cc4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\n\nexport const Activity = (props) => {\n\n    const {\n        type\n    } = props;\n\n    console.log('Activity', props);\n\n    const [currentActivity, setActivity] = useState(null);\n\n    useEffect(() => {\n        let url = `https://www.boredapi.com/api/activity`;\n        console.log(type);\n        if (type) {\n            url += `?type=${type}`;\n            console.log(url);\n        }\n\n        fetch(url)\n            .then((res) => (res.json()))\n            .then((res) => {\n                console.log(res);\n                setActivity(res);\n            })\n    }, [])\n\n\n    const renderActivity = () => {\n        const { activity, type, participants } = currentActivity;\n        return(\n            <ul className=\"activity\">\n                <li>Activity: {activity}</li>\n                <li>Type: {type}</li>\n                <li>Participants: {participants}</li>\n            </ul>\n        )\n    }\n\n    const renderEmpty = () => {\n        return(\n            <div>\n                Loading\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {/*Activity {props.match.url}*/}\n            {currentActivity ? renderActivity() : renderEmpty()}\n\n        </div>\n    )\n\n}\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport {Activity} from \"./Activity\";\n\nconst Activities = (props) => {\n    console.log('Activities', props);\n\n    return(\n        <div>\n            Activities\n            <Route\n                path={`${props.match.url}/recreational`}\n                render={(props) => <Activity {...props} type=\"recreational\"/>}\n            />\n            <Route\n                path={`${props.match.url}/cooking`}\n                render={(props) => <Activity {...props} type=\"cooking\"/>}\n            />\n        </div>\n    )\n}\n\nexport default Activities;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n// import Settings from 'Settings'\n\nconst Account = (props) => {\n\n    const {\n        firstName,\n        lastName,\n        email\n    } = props;\n\n    console.log(props);\n\n    return (\n        <div>\n            Settings\n            <Route\n                path={`${props.match.url}/profile`}\n                render={(props) => <Profile {...props}/>}\n            />\n            <Route\n                path={`${props.match.url}/settings`}\n                // component={<Settings {...props}/>}\n            />\n        </div>\n    )\n}\n\nconst Profile = (props) => {\n\n    console.log('Profile', props);\n    return (\n        <div>\n            PROFILE\n        </div>\n    )\n}\n\n\n\n\n\nexport default Account\n","import React, { useState } from 'react';\nimport './Accordion.css';\n\nconst Accordion = (props) => {\n    const {title, children, isOpen, name, onClick} = props;\n\n    return (\n        <div className=\"accordion-container\" >\n            <div className=\"title\"\n                 onClick={() => onClick(name)}\n            >\n                {title}\n            </div>\n            <div className={isOpen ? \"open\" : \"closed\"}>\n                <div className=\"collapsable-content\">\n                    {children}\n                </div>\n            </div>\n\n        </div>\n    )\n\n\n\n}\n\nexport default Accordion;\n","import React, {memo} from 'react';\nimport { Link, NavLink } from 'react-router-dom'\nimport './NavigationBar.css';\nimport Accordion from '../Accordion';\n\nconst NavigationBar = memo(({accordionStatus, setAccordionStatus}) => {\n    console.log(accordionStatus);\n\n    const {activities, account} = accordionStatus;\n\n    const onClick = (name) => {\n        const newState = {\n            ...accordionStatus,\n            [name]: !accordionStatus[name],\n        }\n        setAccordionStatus(newState);\n    }\n\n    return (\n        <div className=\"navbar\">\n            <ul className=\"nav-section-list\">\n                <li className=\"section-item\">\n                    <Accordion\n                        name=\"activities\"\n                        isOpen={activities}\n                        onClick={onClick}\n                        title=\"Activities\">\n                        <NavLink to=\"/activities/recreational\">Recreational</NavLink>\n                        <NavLink to=\"/activities/cooking\">Cooking</NavLink>\n                    </Accordion>\n                </li>\n                <li className=\"section-item\">\n                    <Accordion\n                        name=\"account\"\n                        isOpen={account}\n                        onClick={onClick}\n                        title=\"Account\"\n                    >\n                        <NavLink to=\"/account/profile\">Profile</NavLink>\n                        <NavLink to=\"/account/settings\">Settings</NavLink>\n                    </Accordion>\n                </li>\n\n            </ul>\n        </div>\n    )\n})\n\nexport default NavigationBar;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\nimport Activities from '../Activities'\nimport Account from '../Account'\nimport NavigationBar from '../NavigationBar';\n\nimport logo from '../../logo.svg';\nimport './App.css';\n\nfunction App(props) {\n    const [userInfo, setUserInfo] = useState({firstName: null, lastName: null, email: null})\n    const [isLoggedIn, setLoginStatus] = useState(false);\n\n    //  Accordion statuses\n    const [isAccordionOpen, setAccordion] = useState({activities: false, account: false })\n\n    console.log(isAccordionOpen);\n\n    return (\n        <div className=\"App\">\n            <div className=\"header\">\n                <div className=\"logo\">\n                    <a href=\"/\">BORED LOGO</a>\n                </div>\n            </div>\n            <div className=\"body\">\n                <Router>\n                    <NavigationBar\n                        accordionStatus={isAccordionOpen}\n                        setAccordionStatus={setAccordion}\n                    />\n                    <div className=\"appcontent\">\n                        <Switch>\n                            <Route path=\"/activities\" component={Activities} />\n                            <Route path=\"/account\" component={Account}></Route>\n                        </Switch>\n                    </div>\n                </Router>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}